# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Python\Lib\TP323\Gui\RecuperationDeFichier.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication,QWidget,QFileDialog,QMessageBox
from TP323.Python import Acceuil
import pyautogui,subprocess,sys,os,glob
class Ui_RecupFich(QWidget):
    patch=""
    global elt
    elt=2
    def Go_Acceuil(self):
        subprocess.Popen("python ./Acceuil.py",shell=True, stdout=sys.stdout)
        #p.communicate()
        exit()
    def Shut_Down(self):
        QApplication.exit()
    def Take_ScrenShot(self):
        myScreenshot = pyautogui.screenshot()
        #patch = str(QFileDialog.getExistingDirectory(self,"Select Directory"))
        #Chemin = patch+"\\Capture.png"
        import  random
        var =random.randint(1,100)
        QMessageBox.information(self, "INFORMATION", "Votre Capture D'ecran à été Enregistré!!\n \n Veuillez la consultée ici : C:\Python\Lib\TP323\Capture ")
        name="..\\Capture\\"+"capt"+str(var)+".png"
        myScreenshot.save(name)
    def takeF(self):
        global patch 
        patch = str(QFileDialog.getExistingDirectory(self,"Select Directory"))
        self.listWidget.clear()
        self.listdirectory(patch)
        return patch
    def Analyse21(self):
        #os.system('cd C:\$Recycle.Bin')
        #subprocess.Popen("dir / a >   ..\Txt\ListeSup.txt ",shell=True, stdout=sys.stdout)
        #subprocess.Popen(" dir / a >   ..\Txt\ListeSup.txt",shell=True, stdout=sys.stdout)
        #subprocess.run(["cd C:\$Recycle.Bin","dir / a >   ..\Txt\ListeSup.txt"])
        #self.listWidget.clear()
        # Ouvrir le fichier en lecture seule
        #file = open("..\Txt\ListeSup.txt", "r")
        #lines = file.readlines()
        # fermez le fichier après avoir lu les lignes
        #file.close()
        # Itérer sur les lignes
        #for line in lines:
            #print(line.strip())
            #self.listWidget.addItem(line.strip())
        QMessageBox.information(self,"INFORMATION","Cette fonctionnalité n'est pas encore opérationnelle!")
        
    def Extention(self,index):
        if index=="Choisir l'extenssion ..." :
            #print(index==0)
            self.listWidget.clear()
        else :
            #print(patch)
            self.listWidget.clear()
            self.listdirectory2(patch,index)

    def listdirectory(self,path):
        fichier=[] 
        l = glob.glob(path+'\\*') 
        for i in l: 
            if os.path.isdir(i): 
                fichier.extend(self.listdirectory(i)) 
                #self.listWidget.addItem("\n\n\n ****************************____SOUS REPERTOIRE : "+i+"\n\n\n")
                #self.listWidget.setStyleSheet("background-color:Green")
            else: 
                fichier.append(i)
                self.listWidget.addItem(""+i+"\n") 
                #self.listWidget.removeItemWidget(self,self.item)
        return fichier

    def listdirectory2(self,path,exten):
        fichier=[] 
        l = glob.glob(path+'\\*') 
        #print (path+'\\*'+exten)
        for i in l: 
            if os.path.isdir(i): 
                fichier.extend(self.listdirectory2(i,exten))
                #self.listWidget.addItem("\n\n\n ****************************____SOUS REPERTOIRE : "+i+"\n\n\n") 
            else: 
                fichier.append(i)
                elt = i.split(".")
                #print(elt)
                n=exten
                #print(n)
                if n in elt:
                    self.listWidget.addItem(""+i+"\n") 
                #self.listWidget.removeItemWidget(self,self.item)
        return fichier

    def searchIndex(self):
        index = self.comboBox.currentText()
        #print(index)
        self.Extention(index)
    def Analyse(self,item):
        global valeur
        valeur = item
        global elt
        elt = 2+1
        self.Analyse2
    def Analyse2(self) :
        from TP323.Python import AnalFich
        if elt==3 :
            QMessageBox.information(self,"INFORMATION","Cette fonctionnalité n'est pas encore opérationnelle!")
        if elt != 3 :
            QMessageBox.information(self,"INFORMATION","VEUILLEZ FAIRE UN CLIC SUR L'ELEMENT A ANALYSE !")
    def setupUi(self, RecupFich):
        RecupFich.setObjectName("RecupFich")
        RecupFich.resize(1360, 760)
        RecupFich.setMinimumSize(QtCore.QSize(1360, 760))
        RecupFich.setMaximumSize(QtCore.QSize(1366, 760))
        RecupFich.setStyleSheet("background-color: rgb(54, 52, 53);")
        self.label = QtWidgets.QLabel(RecupFich)
        self.label.setGeometry(QtCore.QRect(0, 0, 1171, 231))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("../image/DB-Digital-Forensic-Process—Presentation.jpg"))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(RecupFich)
        self.label_2.setGeometry(QtCore.QRect(50, 60, 1041, 61))
        self.label_2.setStyleSheet("font: 56pt \"Algerian\";\n"
"color: rgb(0, 0, 0);\n"
"background-color: rgb(157, 255, 180);\n"
"border-radius:1px;")
        self.label_2.setObjectName("label_2")
        self.pushButton = QtWidgets.QPushButton(RecupFich)
        self.pushButton.setGeometry(QtCore.QRect(50, 180, 361, 41))
        self.pushButton.setStyleSheet("font: 16pt \"Algerian\";\n"
"background-color: rgb(60, 81, 34);\n"
"color: rgb(255, 255, 255);\n"
"border:5px solid black;\n"
"border-radius:15px")
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.takeF)
        #
        #
        #
        #
        self.pushButton_2 = QtWidgets.QPushButton(RecupFich)
        self.pushButton_2.setGeometry(QtCore.QRect(1170, 180, 191, 51))
        self.pushButton_2.setStyleSheet("font: 16pt \"Algerian\";\n"
"background-color: rgb(23, 31, 13);\n"
"color: rgb(255, 255, 255);\n"
"border:5px solid black;\n"
"border-radius:15px")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.Take_ScrenShot)
        #
        #
        #
        self.AnalyseB = QtWidgets.QPushButton(RecupFich)
        self.AnalyseB.setGeometry(QtCore.QRect(1170, 300, 191, 51))
        self.AnalyseB.setStyleSheet("font: 16pt \"Algerian\";\n"
"background-color: rgb(23, 31, 13);\n"
"color: rgb(255, 255, 255);\n"
"border:5px solid black;\n"
"border-radius:15px")
        self.AnalyseB.setText("Analysé!")
        self.AnalyseB.setObjectName("AnalyseB")
        self.AnalyseB.clicked.connect(self.Analyse2)
        #
        #
        #
        #
        #
        self.AnalyseB1 = QtWidgets.QPushButton(RecupFich)
        self.AnalyseB1.setGeometry(QtCore.QRect(1170, 380, 191, 51))
        self.AnalyseB1.setStyleSheet("font: 16pt \"Algerian\";\n"
"background-color: rgb(23, 31, 13);\n"
"color: rgb(255, 255, 255);\n"
"border:5px solid black;\n"
"border-radius:15px")
        self.AnalyseB1.setText("FICHIERS SUPPRIMES!")
        self.AnalyseB1.setObjectName("AnalyseB1")
        self.AnalyseB1.clicked.connect(self.Analyse21)

        #
        #
        #
        self.pushButton_3 = QtWidgets.QPushButton(RecupFich)
        self.pushButton_3.setGeometry(QtCore.QRect(1170, 90, 191, 51))
        self.pushButton_3.setStyleSheet("font: 16pt \"Algerian\";\n"
"background-color: rgb(99, 51, 36);\n"
"color: rgb(255, 255, 255);\n"
"border:5px solid black;\n"
"border-radius:15px")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.Go_Acceuil)
        #
        #
        #
        #
        self.pushButton_4 = QtWidgets.QPushButton(RecupFich)
        self.pushButton_4.setGeometry(QtCore.QRect(1170, 600, 191, 51))
        self.pushButton_4.setStyleSheet("font: 16pt \"Algerian\";\n"
"background-color: rgb(104, 0, 0);\n"
"color: rgb(255, 255, 255);\n"
"border:5px solid black;\n"
"border-radius:15px")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.Shut_Down)
        #
        #
        #
        #
        self.comboBox = QtWidgets.QComboBox(RecupFich)
        self.comboBox.setGeometry(QtCore.QRect(500, 180, 441, 41))
        self.comboBox.setStyleSheet("font: 16pt \"Algerian\";\n"
"background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);\n"
"border:5px solid black;\n"
"border-radius:15px")
        self.comboBox.setObjectName("comboBox")
        gin=["Choisir l'extenssion ...","pdf","docx","png","jpg","css","js","php","py","html","vb","dll","exe"]
        self.comboBox.addItems(gin)
        #
        #
        #
        self.dateTimeEdit = QtWidgets.QDateTimeEdit(RecupFich)
        self.dateTimeEdit.setGeometry(QtCore.QRect(1170, 0, 194, 41))
        self.dateTimeEdit.setStyleSheet("font: 16pt \"Algerian\";\n"
"background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);\n"
"border:5px solid black;\n"
"border-radius:15px")
        self.dateTimeEdit.setObjectName("dateTimeEdit")
        self.pushButton_5 = QtWidgets.QPushButton(RecupFich)
        self.pushButton_5.setGeometry(QtCore.QRect(950, 180, 141, 41))
        self.pushButton_5.setStyleSheet("font: 16pt \"Algerian\";\n"
"background-color: rgb(23, 31, 13);\n"
"color: rgb(255, 255, 255);\n"
"border:5px solid black;\n"
"border-radius:15px")
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.searchIndex)
        #
        #
        #
        self.listWidget = QtWidgets.QListWidget(RecupFich)
        self.listWidget.setGeometry(QtCore.QRect(0, 240, 1171, 451))
        self.listWidget.setStyleSheet("font: 16pt \"Algerian\";\n"
"background-color: rgb(255, 255, 255);\n"
"color: rgb(54, 52, 53);\n"
"border:5px solid black;\n"
"border-radius:15px")
        self.listWidget.setObjectName("listWidget")
        self.listWidget.itemClicked.connect(self.Analyse)

        self.retranslateUi(RecupFich)
        QtCore.QMetaObject.connectSlotsByName(RecupFich)

    def retranslateUi(self, RecupFich):
        _translate = QtCore.QCoreApplication.translate
        RecupFich.setWindowTitle(_translate("RecupFich", "Digital Forensic"))
        self.label_2.setText(_translate("RecupFich", "RECUPERATION DES FICHIERS"))
        self.pushButton.setText(_translate("RecupFich", "SELECTIONNEZ UN DOSSIER"))
        self.pushButton_2.setText(_translate("RecupFich", "FAIT UNE CAPTURE "))
        self.pushButton_3.setText(_translate("RecupFich", "ACCEUIL"))
        self.pushButton_4.setText(_translate("RecupFich", "EXIT"))
        self.pushButton_5.setText(_translate("RecupFich", "FILTRER"))
def main():
    app = QApplication(sys.argv)
    fen = QWidget()
    elt =Ui_RecupFich()
    elt.setupUi(fen)
    fen.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
